{"version":3,"sources":["Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","React","forwardRef","ref","style","counter","changeCount","remove","provided","nodeRef","useRef","useState","counterIn","setCounterIn","draggableProps","marginBottom","CSSTransition","classNames","in","appear","unmountOnExit","onExited","id","timeout","className","backgroundColor","hue","dragHandleProps","icon","size","color","name","onClick","count","MAX_COUNT","MIN_COUNT","App","counters","setCounters","counterSettings","setCounterSettings","useEffect","stored","localStorage","getItem","JSON","parse","setItem","stringify","removeCounter","filter","updateCounter","values","find","changeCounter","value","newList","forEach","onDragEnd","result","source","destination","droppableId","index","movedCounter","splice","onSubmit","e","preventDefault","uuidv4","Math","floor","random","type","placeholder","onChange","target","c","parseInt","console","log","process","faGreaterThan","snapshot","innerRef","droppableProps","length","map","draggableId","update","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","faPlus","faMinus","faTimes","faCog","faBars","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.984d87a5.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst Counter = React.forwardRef(({ counter, changeCount, remove, provided }, ref) => {\r\n\r\n    const nodeRef = useRef();\r\n    const [counterIn, setCounterIn] = useState(true);\r\n\r\n    const getItemStyle = (style) => ({\r\n        marginBottom: \"1rem\",\r\n        ...style\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            {...provided.draggableProps}\r\n            style={getItemStyle(provided.draggableProps.style)}\r\n        >\r\n            <CSSTransition classNames=\"counter-anim\" nodeRef={nodeRef} in={counterIn} appear unmountOnExit onExited={() => remove(counter.id)} timeout={200}>\r\n\r\n                <div className=\"counter\" ref={nodeRef} style={{ backgroundColor: `hsl(${counter.hue}, 50%, 50%)` }}>\r\n                    <div className=\"counter-drag-handle\" {...provided.dragHandleProps}>\r\n                        <FontAwesomeIcon icon=\"bars\" size=\"2x\" color=\"white\" />\r\n                    </div>\r\n                    <div className=\"counter-name\">{counter.name}</div>\r\n                    <div className=\"counter-main\">\r\n                        <button className=\"inc-counter-btn\" onClick={() => changeCount(counter.id, counter.count - 1)}>\r\n                            <FontAwesomeIcon icon=\"minus\" size=\"lg\" color={`hsl(${counter.hue}, 50%, 50%)`} />\r\n                        </button>\r\n                        <span className=\"counter-count\">{counter.count}</span>\r\n                        <button className=\"dec-counter-btn\" onClick={() => changeCount(counter.id, counter.count + 1)}>\r\n                            <FontAwesomeIcon icon=\"plus\" size=\"lg\" color={`hsl(${counter.hue}, 50%, 50%)`} />\r\n                        </button>\r\n                    </div>\r\n                    {/* <button className=\"settings-btn\" onClick={() => { }}>\r\n                    <FontAwesomeIcon icon=\"cog\" size=\"lg\" color={`hsl(${counter.hue}, 50%, 50%)`} />\r\n                </button> */}\r\n                    <button className=\"rm-counter-btn\" onClick={() => setCounterIn(false)} style={{ backgroundColor: `hsl(${counter.hue}, 50%, 50%)` }}>\r\n                        <FontAwesomeIcon icon=\"times\" size=\"lg\" color={'white'} />\r\n                    </button>\r\n\r\n                </div>\r\n            </CSSTransition>\r\n        </div>);\r\n})\r\n\r\nexport default Counter;","import { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Counter from './Counter';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faGreaterThan} from '@fortawesome/free-solid-svg-icons';\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst MAX_COUNT = 999999;\r\nconst MIN_COUNT = -999999;\r\n\r\nfunction App() {\r\n  const [counters, setCounters] = useState([]);\r\n  const [counterSettings, setCounterSettings] = useState({name: \"\", count: 0});\r\n\r\n  useEffect(() => {\r\n    let stored = localStorage.getItem('counters');\r\n    if (stored) {\r\n      setCounters(JSON.parse(stored));\r\n    }\r\n    // let currentVersion = localStorage.getItem('version');\r\n    // if (currentVersion) {\r\n    //   if (currentVersion === process.env.REACT_APP_VERSION) {\r\n    //     let stored = localStorage.getItem('counters');\r\n    //     if (stored) {\r\n    //       setCounters(JSON.parse(stored));\r\n    //     }\r\n    //   } else {\r\n    //     localStorage.clear();\r\n    //     localStorage.setItem('version', process.env.REACT_APP_VERSION);\r\n    //   }\r\n    // } else {\r\n    //   localStorage.clear();\r\n    //   localStorage.setItem('version', process.env.REACT_APP_VERSION);\r\n    // }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('counters', JSON.stringify(counters))\r\n  }, [counters]);\r\n\r\n  const createCounter = (e) => {\r\n    e.preventDefault();\r\n    setCounters((counters) => ([...counters, \r\n      {\r\n        name: counterSettings.name ? counterSettings.name : \"New Counter\", \r\n        id: uuidv4(), \r\n        count: counterSettings.count,\r\n        hue: Math.floor(Math.random() * 360)\r\n       }]) );\r\n    setCounterSettings({name: '', count: 0})\r\n  }\r\n\r\n  const removeCounter = (id) => {\r\n    setCounters((counters) => (counters.filter(counter => counter.id !== id)));\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {counter id} id the counter's id\r\n   * @param {counter info} values an object containing the counter's updated info\r\n   */\r\n  const updateCounter = (id, values) => {\r\n    const counterObj = counters.find(counter => counter.id === id);\r\n    if (counterObj) {\r\n      \r\n    }\r\n  }\r\n\r\n  const changeCounter = (id, value) => {\r\n    let newList = [...counters];\r\n    newList.forEach(counter => {\r\n      if (counter.id === id) {\r\n        counter.count = value > MAX_COUNT ? MAX_COUNT : (value < MIN_COUNT ? MIN_COUNT : value);\r\n      }\r\n    });\r\n    setCounters(newList);\r\n  };\r\n\r\n  const changeSettingsName = (e) => {\r\n    setCounterSettings(counterSettings => ({...counterSettings, name: e.target.value}));\r\n  }\r\n\r\n  const changeSettingsCount = (e) => {\r\n    let c = parseInt(e.target.value);\r\n    console.log(process.env.MAX_COUNT);\r\n    setCounterSettings(counterSettings => ({...counterSettings, count: c > MAX_COUNT ? MAX_COUNT : c}));\r\n  }\r\n\r\n  const onDragEnd = (result) => {\r\n    const {source, destination} = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (destination.droppableId === source.droppableId &&\r\n      destination.index === source.index) {\r\n      return;\r\n    }\r\n    \r\n    const movedCounter = counters[source.index];\r\n    let newList = [...counters];\r\n    newList.splice(source.index, 1);\r\n    newList.splice(destination.index, 0, movedCounter);\r\n\r\n    setCounters(newList);\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h2>Counter App</h2>\r\n        </header>\r\n\r\n        <div id=\"counters-section\">\r\n          <div id=\"create-counter\">\r\n            <h3 id=\"create-counter-title\" >Create a counter to get started</h3>\r\n            <form onSubmit={createCounter}>\r\n              <input id=\"counter-name-setter\" type=\"text\" value={counterSettings.name} placeholder=\"Name...\" onChange={changeSettingsName}></input>\r\n              <input id=\"counter-count-setter\" type=\"number\" value={counterSettings.count} placeholder=\"Count...\" onChange={changeSettingsCount}></input>\r\n              <button id=\"create-counter-btn\">\r\n                <FontAwesomeIcon icon={faGreaterThan}  size=\"lg\"/>\r\n              </button>\r\n            </form>\r\n          </div>\r\n\r\n          <Droppable droppableId={\"droppable-counters\"}>\r\n            {\r\n              (provided, snapshot) => (\r\n                <div id=\"counters-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                  {counters.length ? \r\n                  counters.map((counter, index) => (\r\n                    <Draggable key={counter.id} draggableId={\"draggable-\"+counter.id} index={index}>\r\n                      {\r\n                        (provided, snapshot) => (\r\n                          <Counter ref={provided.innerRef} counter={counter} changeCount={changeCounter} remove={removeCounter} update={updateCounter} provided={provided}/>\r\n                        )\r\n                      }\r\n                    </Draggable>\r\n                  )) \r\n                  : \r\n                  <div id=\"counters-list-empty\">\r\n                    <span>No counters at the moment. Create one now!</span>\r\n                  </div>\r\n                  }\r\n                  {provided.placeholder}\r\n                </div>\r\n              )\r\n            }\r\n          </Droppable>\r\n        </div>\r\n\r\n        <footer className=\"App-footer\">\r\n          <span>{process.env.REACT_APP_NAME} v. {process.env.REACT_APP_VERSION} by Jacky Lo</span>\r\n        </footer>\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus, faMinus, faTimes, faCog, faBars } from '@fortawesome/free-solid-svg-icons'\n\n\nlibrary.add(faPlus, faMinus, faTimes, faCog, faBars)\n\nconsole.log(`${process.env.REACT_APP_NAME} ${process.env.REACT_APP_VERSION}`)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}