{"version":3,"sources":["Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","counter","change","remove","className","style","backgroundColor","hsl","hue","saturation","lightness","name","onClick","id","count","icon","size","color","App","useState","counters","setCounters","counterSettings","setCounterSettings","useEffect","stored","localStorage","getItem","JSON","parse","setItem","stringify","removeCounter","filter","changeCounter","value","newList","forEach","changeSettings","e","type","target","onSubmit","preventDefault","uuidv4","parseInt","Math","floor","random","createCounter","placeholder","onChange","faGreaterThan","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","faPlus","faMinus","faTimes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d4b4ed5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Counter = ({ counter, change, remove }) => {\r\n    return (<div className=\"counter\" style={{ backgroundColor: `hsl(${counter.hsl.hue}, ${counter.hsl.saturation}, ${counter.hsl.lightness})` }}>\r\n        <span className=\"counter-name\">{counter.name}</span>\r\n        <div className=\"counter-main\">\r\n            <button className=\"inc-counter-btn\" onClick={() => change(counter.id, counter.count - 1)}>\r\n                <FontAwesomeIcon icon=\"minus\" size=\"lg\" color={`hsl(${counter.hsl.hue}, ${counter.hsl.saturation}, ${counter.hsl.lightness})`} />\r\n            </button>\r\n            <span className=\"counter-count\">{counter.count}</span>\r\n            <button className=\"dec-counter-btn\" onClick={() => change(counter.id, counter.count + 1)}>\r\n                <FontAwesomeIcon icon=\"plus\" size=\"lg\" color={`hsl(${counter.hsl.hue}, ${counter.hsl.saturation}, ${counter.hsl.lightness})`} />\r\n            </button>\r\n        </div>\r\n        <button className=\"rm-counter-btn\" onClick={() => remove(counter.id)}>\r\n            <FontAwesomeIcon icon=\"times\" size=\"lg\" color={`hsl(${counter.hsl.hue}, ${counter.hsl.saturation}, ${counter.hsl.lightness})`} />\r\n        </button>\r\n    </div>);\r\n}\r\n\r\nexport default Counter;","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Counter from './Counter';\nimport {v4 as uuidv4} from 'uuid';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faGreaterThan} from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  const [counters, setCounters] = useState([]);\n  const [counterSettings, setCounterSettings] = useState({name: \"\", count: 0});\n\n  useEffect(() => {\n    let stored = localStorage.getItem('counters');\n    if (stored) {\n      setCounters(JSON.parse(stored));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('counters', JSON.stringify(counters))\n  }, [counters]);\n\n  const createCounter = (e) => {\n    e.preventDefault();\n    setCounters((counters) => ([...counters, \n      {\n        name: counterSettings.name ? counterSettings.name : \"New Counter\", \n        id: uuidv4(), \n        count: parseInt(counterSettings.count),\n        hsl: {\n          hue: Math.floor(Math.random() * 360),\n          saturation: '50%',\n          lightness: '50%',\n        }\n       }]) );\n    setCounterSettings({name: '', count: 0})\n  }\n\n  const removeCounter = (id) => {\n    setCounters((counters) => (counters.filter(counter => counter.id !== id)));\n  }\n\n  const changeCounter = (id, value) => {\n    let newList = [...counters];\n    newList.forEach(counter => {\n      if (counter.id === id) {\n        counter.count = value;\n      }\n    });\n    setCounters(newList);\n\n  };\n\n  const changeSettings = (e, type) => {\n    setCounterSettings(counterSettings => ({...counterSettings, [type]: e.target.value}));\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Counter App</h2>\n      </header>\n\n      <div id=\"counters-section\">\n        <div id=\"create-counter\">\n          <h3 id=\"create-counter-title\" >Create a counter to get started</h3>\n          <form onSubmit={(e) => createCounter(e)}>\n            <input id=\"counter-name-setter\" type=\"text\" value={counterSettings.name} placeholder=\"Name...\" onChange={(e) => changeSettings(e, 'name')}></input>\n            <input id=\"counter-count-setter\" type=\"number\" value={counterSettings.count} placeholder=\"Count...\" onChange={(e) => changeSettings(e, 'count')}></input>\n            <button id=\"create-counter-btn\">\n              <FontAwesomeIcon icon={faGreaterThan}  size=\"lg\"/>\n            </button>\n          </form>\n        </div>\n\n        <div id=\"counters-list\">\n          {counters.length ? \n          counters.map((counter) => (\n            <Counter key={counter.id} counter={counter} change={changeCounter} remove={removeCounter}/>\n          )) \n          : \n          <div id=\"counters-list-empty\">\n            <span>No counters at the moment. Create one now!</span>\n          </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus, faMinus, faTimes } from '@fortawesome/free-solid-svg-icons'\n\n\nlibrary.add(faPlus, faMinus, faTimes)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}